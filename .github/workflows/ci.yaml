name: ci
on: 
  workflow_dispatch:
  pull_request:
jobs:
  go-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22.x
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run linters
        uses: golangci/golangci-lint-action@v5
        with:
          version: latest
          args: --timeout=3m
  go-test:
    strategy:
      matrix:
        go-version: [1.22.x]
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Install Go
        if: success()
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v4
      - name: go tests
        run: go test -v -covermode=count -json ./... > test.json
      - name: annotate go tests
        if: always()
        uses: guyarb/golang-test-annotations@v0.5.1
        with:
          test-results: test.json

  test:
    runs-on: ubuntu-latest
    # Define any services needed for the test suite (or delete this section)
    services:
      postgres:
        image: postgres:16
        # Maps tcp port 5432 on service container to the host
        ports:
          - "5432:5432"
        env:
          POSTGRES_USER: bucket
          POSTGRES_PASSWORD: bucket
          POSTGRES_DB: bucket
        # needed because the postgres container does not provide a healthcheck
        options: >-
          --health-cmd pg_isready 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 3
          --health-start-period 60s

      bitbucket:
        image: atlassian/bitbucket-server:8.9.4
        env:
          JVM_MINIMUM_MEMORY: 2g
          JVM_MAXIMUM_MEMORY: 4g
          JDBC_DRIVER: org.postgresql.Driver
          JDBC_USER: bucket
          JDBC_PASSWORD: bucket
          JDBC_URL: jdbc:postgresql://postgres:5432/bucket
        ports:
          - '7990:7990'
        options: >-
          --health-cmd "curl -f http://localhost:7990/"
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 3
          --health-start-period 90s

    env:
      BATON_LOG_LEVEL: debug
      # Add any environment variables needed to run baton-bitbucket-datacenter
      BATON_BASE_URL: 'http://localhost:7990'
      BATON_USERNAME: ${{ secrets.BATON_BITBUCKETDC_PASSWORD }}
      BATON_PASSWORD: ${{ secrets.BATON_BITBUCKETDC_USERNAME }}
      # BATON_ACCESS_TOKEN: 'secret_token'
      # The following parameters are passed to grant/revoke commands
      CONNECTOR_GRANT: 'group:local-group:ADMIN:user:62'
      CONNECTOR_ENTITLEMENT: 'group:local-group:ADMIN'
      CONNECTOR_PRINCIPAL_TYPE: 'user'
      CONNECTOR_PRINCIPAL: '62'
    steps:
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.22.x
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install postgres client
        run: sudo apt install postgresql-client
      # - name: Remove postgres db
      #   run: |
      #     sudo systemctl stop postgresql.service
      #     psql -h localhost --user bitbucket -c "drop database bitbucket"
      #   env:
      #     PGPASSWORD: bitbucket
      - name: Import sql into postgres
        run: psql -h localhost --user bucket -f environment.sql
        env:
          PGPASSWORD: bucket
      - name: Build baton-bitbucket-datacenter
        run: go build ./cmd/baton-bitbucket-datacenter
      - name: Run baton-bitbucket-datacenter
        run: ./baton-bitbucket-datacenter --bitbucketdc-username ${{ env.BATON_USERNAME }} --bitbucketdc-password ${{ env.BATON_PASSWORD }} --bitbucketdc-baseurl ${{ env.BATON_BASE_URL }}
      - name: Install baton
        run: ./scripts/get-baton.sh && mv baton /usr/local/bin
      - name: Check for grant before revoking
        run: baton grants --entitlement="${{ env.CONNECTOR_ENTITLEMENT }}" --output-format=json | jq --exit-status ".grants[].principal.id.resource == \"${{ env.CONNECTOR_PRINCIPAL }}\""
      - name: Revoke grants
        run: ./baton-bitbucket-datacenter --bitbucketdc-username ${{ env.BATON_USERNAME }} --bitbucketdc-password ${{ env.BATON_PASSWORD }} --bitbucketdc-baseurl ${{ env.BATON_BASE_URL }} --revoke-grant="${{ env.CONNECTOR_GRANT }}"
      - name: Check grant was revoked
        run: ./baton-bitbucket-datacenter && baton grants --entitlement="${{ env.CONNECTOR_ENTITLEMENT }}" --output-format=json | jq --exit-status "if .grants then .grants[]?.principal.id.resource != \"${{ env.CONNECTOR_PRINCIPAL }}\" else . end"
      - name: Grant entitlement
        run: ./baton-bitbucket-datacenter --bitbucketdc-username ${{ env.BATON_USERNAME }} --bitbucketdc-password ${{ env.BATON_PASSWORD }} --bitbucketdc-baseurl ${{ env.BATON_BASE_URL }} --grant-entitlement="${{ env.CONNECTOR_ENTITLEMENT }}" --grant-principal="${{ env.CONNECTOR_PRINCIPAL }}" --grant-principal-type="${{ env.CONNECTOR_PRINCIPAL_TYPE }}"
      - name: Check grant was re-granted
        run: baton grants --entitlement="${{ env.CONNECTOR_ENTITLEMENT }}" --output-format=json | jq --exit-status ".grants[].principal.id.resource == \"${{ env.CONNECTOR_PRINCIPAL }}\""
